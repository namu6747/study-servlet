@ServletComponentScan
servlet 찾아서 등록

WAS가 Servlet 표준 스펙을 구현함
request, response가 구현 객체


문자 인코딩 요즘은 대부분 UTF-8 사용

HTML form 데이터도 메시지 바디를 통해 전송되므로 직접 읽을 수 있다.
하지만 편리한 파리미터 조회기능( request.getParameter(...) )을
이미 제공하기 때문에 파라미터 조회 기능을 사용하면 된다.

WEB-INF
이 경로안에 JSP가 있으면 외부에서 직접 JSP를 호출할 수 없다.
우리가 기대하는 것은 항상 컨트롤러를 통해서 JSP를 호출하는 것이다.

여기서 form의 action을 보면 절대 경로( / 로 시작)가 아니라
상대경로( / 로 시작X)인 것을 확인할 수 있다.
이렇게 상대경로를 사용하면 폼 전송시
현재 URL이 속한 계층 경로 + save가 호출된다.
현재 계층 경로: /servlet-mvc/members/
결과: /servlet-mvc/members/save
실제 개발에선 웬만하면 절대 경로를 이용하자

서블릿과 JSP 동일한 URI 지정시 서블릿이 우선 순위

브라우저에서 href 이동 상대 경로는 url 계층을 참고하면 된다.
sout 대신 logger를 찍어라

WEB-INF에 jsp를 숨겨두고 forward를 이용해서 페이지를 삽입한다
클라이언트는 jsp를 절대 직접 호출할 수 없다.

준위가 다른 부분을 함께 개선하려하지 말자
구조를 개선하려면 구조만 건들여야 한다.

MVC v1에선 다형성을 이용
요청 응답 객체를 받는 인터페이스와 서블릿 프론트 컨트롤러
Map에 uri key와 컨트롤러 인스턴스를 저장

v2 에선 view를 분리한다.
각 컨트롤러에서 forward를 담당하지 않고 viewPath를
MyView 객체에 주입하여 render를 위임한다.

RequestMappingHandlerMapping은
스프링 빈 중에서 @RequestMapping 또는 @Controller가
클래스 레벨에 붙어 있는 경우에 매핑 정보로 인식한다

@RequestMapping("/springmvc/v2/members")
클래스 단위에 붙여주면 중복 코드를 제거할 수 있음
클래스 레벨로 통합하고 메소드 레벨에서 조합

JSP를 사용하지 않기 때문에 Jar를 사용하는 것이 좋습니다. 
앞으로 스프링 부트를 사용하면 이 방식을 주로 사용하게 됩니다.
> Jar를 사용하면 항상 내장 서버(톰캣등)를 사용하고, 
webapp 경로도 사용하지 않습니다. 
내장 서버 사용에 최적화 되어 있는 기능입니다. 
최근에는 주로 이 방식을 사용합니다.
> War를 사용하면 내장 서버도 사용가능 하지만, 주로 외부 서버에 배포하는 목적으로 사용합니다








